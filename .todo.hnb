<?xml version="1.0" encoding="UTF-8"?><?hnb pos="93"?>
<!-- generated by hnb 1.9.18 (http://hnb.sourceforge.net) -->

<!DOCTYPE tree[
	<!ELEMENT tree (node*)>
	<!ELEMENT data (#PCDATA)> <!-- (max 4096 bytes long) -->
	<!ELEMENT node (data?,node*)>
	<!ATTLIST node done (yes|no) #IMPLIED
	          type CDATA #IMPLIED
	>]>

<tree>
<node><data>#### WHY ####</data>
	<node><data>HNB over TUDU</data>
		<node><data>tudu has better concept - hier + text</data>
			<node><data>but text is rearely needed - it&apos;s fast notes, single-line sentences are ok</data></node>
		</node>
		<node><data>tudu doesnt have any editing capabilities for titles or text</data>
			<node><data>hnb has - and that&apos;s great advantage for fast noting</data></node>
		</node>
		<node><data>even more, tudu has a few options to customize</data>
			<node><data>while hnb - alot, especially key bindings</data></node>
		</node>
		<node><data>both tools need to be improved in terms of coding to get more features</data>
			<node><data>but for tudu the same features that hnb already has need to be implemented</data></node>
		</node>
		<node><data>tudu need to be used for project planning</data>
			<node><data>category, due, priority - all could be used</data></node>
			<node><data>but we have taskell - dunno is it better or not...</data></node>
		</node>
	</node>
</node>
<node><data>#### SEE ####</data>
	<node><data>Dotfiles for investigation</data>
		<node><data>hackorama/devprof :: Development profile for bash, vim, git</data></node>
		<node><data>https://github.com/AlexAegis/dotfiles</data></node>
		<node><data>junegunn/dotfiles :: from the author of `fzf`</data></node>
		<node><data>Naheel-Azawy/naheel-dotfiles :: from the author of `fmz` and `stpv`</data></node>
		<node><data>ViRu-ThE-ViRuS/configs :: kitty + tmux + fish setup for macos</data></node>
		<node><data>*elianiva/dotfiles :: all stuff i love</data></node>
		<node><data>https://github.com/mathiasbynens/dotfiles</data></node>
		<node><data>https://github.com/ThePrimeagen/.dotfiles</data></node>
		<node><data>https://github.com/zanshin/dotfiles</data></node>
		<node><data>https://github.com/caarlos0/dotfiles.fish</data></node>
		<node><data>https://github.com/samoshkin/dotfiles</data></node>
	</node>
	<node><data>NeoVim setups</data>
		<node><data>doom-neovim/doom-nvim :: configuration basis</data></node>
		<node><data>https://github.com/abzcoding/lvim</data></node>
		<node><data>https://github.com/danielnehrig/nvim</data></node>
		<node><data>https://github.com/alex-popov-tech/.dotfiles/tree/master/nvim</data></node>
		<node><data>https://github.com/kuator/nvim</data></node>
		<node><data>https://github.com/abzcoding/lvim</data></node>
		<node><data>https://github.com/kuator/nvim/</data></node>
	</node>
	<node><data>[LazyVim](https://www.lazyvim.org)</data>
		<node><data>setup powered by `lazy.nvim` to customize and extend your config</data></node>
	</node>
	<node><data>fzf-scripts</data>
		<node><data>https://github.com/beauwilliams/Dotfiles/blob/master/Shell/zsh/.config/zsh/functions/functions.sh</data></node>
		<node><data>https://github.com/suvayu/fzf_search</data></node>
		<node><data>https://github.com/beauwilliams/awesome-fzf</data></node>
		<node><data>https://github.com/b4b4r07/enhancd</data></node>
		<node><data>https://github.com/udayvir-singh/pass-menu</data></node>
		<node><data>https://github.com/Magnushhoie/fuz</data></node>
	</node>
</node>
<node><data>#### WF ####</data>
	<node><data>&apos;hnb&apos; for ideas - sort of &apos;incoming&apos;</data></node>
	<node><data>&apos;taskell&apos; to drive every release</data></node>
	<node><data>&apos;tudu&apos; - still no idea how to use</data></node>
</node>
<node><data>==== HNB =====</data>
	<node><data>~~ Ideas ~~</data>
		<node><data>re-implement in js/node ts/deno</data>
			<node><data>first, implement fzf for heir-trees</data></node>
			<node><data>similar: https://github.com/anc95/inquirer-file-tree-selection</data>
				<node><data>based on: https://github.com/SBoudrias/Inquirer.js</data></node>
			</node>
		</node>
		<node><data>if use C++</data>
			<node><data>use FtxUI: https://github.com/ArthurSonzogni/FTXUI</data>
				<node><data>native, webasm - whatever</data></node>
				<node><data>got plenty of use-cases and sid-projects</data></node>
			</node>
		</node>
	</node>
	<node><data>~~ Tree ~~</data>
		<node><data>Marks #src</data></node>
		<node><data>N-items up/down goto #src</data></node>
		<node><data>Goto last item on level</data></node>
	</node>
	<node><data>~~ Nodes ~~</data>
		<node><data>Highlight by regex #src</data>
			<node><data>introduce hash-tags and at-actions, color them</data></node>
		</node>
		<node><data>Markdown syntax in titles</data>
			<node><data>basic ones: bold, underline, code</data></node>
		</node>
		<node><data>Collapse/uncollapse N children deep #src</data></node>
		<node><data>Edit mode</data>
			<node><data>display cursor rect! #src</data>
				<node><data>char already get another color, but on spaces it&apos;s not seen</data></node>
				<node><data>just revert the color (attr)</data></node>
			</node>
		</node>
	</node>
	<node><data>~~ Undo ~~</data>
		<node><data>shortcuts are cumbersome and error-prone</data></node>
		<node><data>or - may place all to git or hg or bzr, whatever</data>
			<node><data>since I everywhere use git - then using bzr or hg for local changes is good</data></node>
		</node>
		<node><data>or - use log-rotate with depth say 10</data></node>
	</node>
</node>
<node><data>==== LIBS ====</data>
	<node><data>all top-level scripts should provide complete help (cut-off underlying stuff from text)</data></node>
	<node><data>nextg eval-based common-lib stuff (colorization etc)</data></node>
	<node><data>extract encryption base from sn-cli - this is normal approach for all script which requires sensitive data</data></node>
</node>
<node><data>==== SCRIPTS ====</data>
	<node><data>cd-fast to at least bb-git-repos</data></node>
	<node><data>operate on all bb-repos with single command</data></node>
</node>
<node><data>==== APPS ====</data>
	<node><data>DeadBeef</data>
		<node><data>~ crushes alot</data></node>
		<node><data>~ annoys with logs</data></node>
		<node><data>+ plain configs, ready for merge</data></node>
	</node>
	<node><data>LF</data>
		<node><data>use &apos;glow&apos; to preview &apos;md&apos; in pane and with &apos;fzf&apos;</data></node>
		<node><data>overwview what lf is configured to do</data>
			<node><data>and a shortcut to print it all to console (like &apos;?&apos;)</data></node>
		</node>
	</node>
	<node><data>TMUX</data>
		<node><data>pretty status line and unicode weather here: https://github.com/2kabhishek/tmux2k</data></node>
	</node>
	<node><data>readability-cli - Firefox Reader View in terminal</data>
		<node><data>https://gitlab.com/gardenappl/readability-cli</data></node>
		<node><data>requires node installed</data></node>
		<node><data>! for now - use from emscripten</data></node>
		<node><data>!! many other impls: https://github.com/masukomi/arc90-readability</data>
			<node><data>they all are quite outdated</data></node>
			<node><data>installed this: https://github.com/eafer/rdrview</data>
				<node><data>it requires libcurl4-gnutls-dev libseccomp-dev</data></node>
				<node><data>downloads to text directly</data></node>
			</node>
		</node>
	</node>
	<node><data>myrepo : https://github.com/RichiH/myrepos ; https://myrepos.branchable.com/</data></node>
	<node><data>pont dotfile manager - https://github.com/AlexAegis/pont</data></node>
	<node><data>images in terminal</data>
		<node><data>https://manpages.org/img2sixel</data></node>
		<node><data>https://github.com/hackerb9/vv</data></node>
		<node><data>https://github.com/horriblename/lfimg-sixel</data></node>
	</node>
	<node><data>Snippets Managers</data>
		<node><data>https://github.com/knqyf263/pet</data></node>
		<node><data>https://github.com/qownnotes/qc</data></node>
		<node><data>https://lib.rs/crates/the-way</data></node>
		<node><data>https://github.com/lemoony/snipkit</data></node>
	</node>
</node>
<node><data>==== FILES ====</data>
	<node><data>Entrypoints &gt;&gt;</data>
		<node><data>~ now 4 dedicated scripts at toplevel and some - in bin/</data></node>
		<node><data>! must be single - say &apos;lope.sh&apos; to deal with it all</data>
			<node><data>$ lope.sh do apps</data></node>
			<node><data>$ lope.sh do dots</data></node>
		</node>
		<node><data>! lope.sh place to ~/.local/bin</data></node>
		<node><data>! better cliargs</data>
			<node><data>cd: to &apos;lope&apos; git-repo (cd dots - to dots, cd conf - to conf, etc)</data></node>
			<node><data>git: to make git ops on lope (git get, git put, git diff, ...)</data></node>
		</node>
		<node><data>! snippet manager for best practices</data></node>
	</node>
	<node><data>Notes &gt;&gt;</data>
		<node><data>% conf/ has notes (hints.md) - can move it to snippet manager!</data></node>
	</node>
	<node><data>Scripts &gt;&gt;</data>
		<node><data>extract.sh to deal with any type of archive</data>
			<node><data>2 versions: in lfrc and in lib/</data></node>
			<node><data>select any, make it dedicated, use everywhere</data></node>
		</node>
		<node><data>open.sh</data>
			<node><data>open function in lfrc and pv script</data></node>
		</node>
	</node>
	<node><data>Conf &gt;&gt;</data>
		<node><data>! subfolder for every component</data></node>
		<node><data>? support yaml</data>
			<node><data>mrbaseman/parse_yaml</data></node>
		</node>
		<node><data>! bin-files like goldendict dicts, sounds, whatever</data></node>
		<node><data>kde-configs to git</data>
			<node><data>https://github.com/shalva97/kde-configuration-files</data></node>
			<node><data>https://userbase.kde.org/KDE_System_Administration/Configuration_Files</data></node>
		</node>
	</node>
	<node><data>Links &gt;&gt;</data>
		<node><data>! move away from stow</data>
			<node><data>git bare repo in home? https://github.com/kazhala/dotbare</data></node>
		</node>
		<node><data># why</data>
			<node><data>need to overwrite files easy w/o manual conflict resolving</data></node>
			<node><data>dislike current folders organization - when many script live in dots/local/bin</data></node>
		</node>
		<node><data>? where to</data>
			<node><data>make symplinks not with `stow` but via `:files_actions_apply()`</data></node>
			<node><data>[Dorothy](https://github.com/bevry/dorothy) is a dotfile ecosystem</data></node>
			<node><data>many of dots-managers outthere, select one</data></node>
		</node>
	</node>
	<node><data>Dots &gt;&gt;</data>
		<node><data>!! boostrap for dotfiles https://dotfiles.github.io/bootstrap/</data></node>
		<node><data>!! automate **khotkeys** extraction/injection</data></node>
		<node><data>aliases for common commands</data>
			<node><data>ls=exa, cat=batcat, find=fd, ...</data></node>
		</node>
		<node><data>qmmp (they are messy, need to extract parts and then merge back)</data></node>
		<node><data>tilix: https://gist.github.com/peterrus/f7a8f6ce09ba6506b780f6ca8bceb74f</data></node>
		<node><data>doublecmd: ~/.config/doublecmd</data></node>
		<node><data>goldendict</data></node>
	</node>
</node>
<node><data>==== GH-APPS ====</data>
	<node><data>!? new engine</data>
		<node><data>[eget](https://github.com/zyedidia/eget)</data>
			<node><data>It downloads and extracts pre-built binaries from releases on GitHub.</data></node>
		</node>
		<node><data>[afx](https://github.com/b4b4r07/afx) Package manager for CLI</data></node>
		<node><data>[asdf](https://github.com/asdf-vm/asdf)</data></node>
	</node>
	<node><data>?! notifications for updates</data>
		<node><data>make rss feeds for all apps in list</data>
			<node><data>to get updates and info about new releases</data></node>
			<node><data>or just extract it from appinfo-json? tag &apos;body&apos; below &apos;tarball_url&apos;</data></node>
		</node>
	</node>
	<node><data>!! install also bash completions and man-pages</data>
		<node><data>same for apps installed with dcbi</data></node>
	</node>
	<node><data>! **upgrade** capability</data></node>
	<node><data>? jq is not available - download and use gojq?</data></node>
	<node><data>! Dockerfile - helper script to build</data>
		<node><data>always cache gh-apps somewhere, even use system ones</data></node>
		<node><data>place to image cached apps only, no downloads</data></node>
	</node>
	<node><data>! github rate limits may fail the installation process</data>
		<node><data>curl -I https://api.github.com/users/octocat : to check how many is left (also decrements the counter)</data></node>
		<node><data>for anon user - 60 requests per hour</data></node>
		<node><data>good approach - first download the meta with validation, and then install</data></node>
		<node><data>meta can be cached in git for instance and reused from the repo - just to get rid of failure</data></node>
	</node>
	<node><data>! install to /usr/local</data></node>
	<node><data>ajeetdsouza/zoxide : smarter cd command</data></node>
	<node><data>Mellbourn/zabb : plugin for finding z abbreviations</data></node>
	<node><data>nachoparker/xcol : tool colorize its standard input for each one of its arguments (zsh-only, need bash-adoption)</data></node>
	<node><data>xxh/xxh : bring your favorite shell wherever you go through ssh without root access and system installationsmain</data></node>
</node>
<node><data>==== SRC-APPS ====</data>
	<node><data>libhydrogen wants `cc` shortcut which is available only when default gcc is installed</data>
		<node><data>can build `libhydrogen` with cmake, not make</data></node>
		<node><data>can make own form and build and release encpipe for my needs, make it available in binary form</data></node>
	</node>
	<node><data>eliminate encpipe? there are good other tools: age, openssl-pipe, ...</data></node>
</node>
<node><data>==== NEOVIM ====</data>
	<node><data>list - https://github.com/rockerBOO/awesome-neovim</data></node>
	<node><data>encryption</data>
		<node><data>use `/dev/shm` instead of `/tmp` wherever possible</data></node>
		<node><data>`enc` tool instead of `encpipe`</data>
			<node><data>replace &apos;encpipe.vim&apos; with similar plugin - but for &apos;enc&apos;</data></node>
		</node>
	</node>
	<node><data>split config in number of files</data>
		<node><data>see: https://github.com/rushilmehra/dotfiles/tree/main/nvim</data></node>
		<node><data>https://github.com/2KAbhishek/nvim2k</data></node>
	</node>
	<node><data>plugins</data>
		<node><data>`chrisgrieser/nvim-various-textobjs` more than a dozen new text objects for Neovim.</data></node>
		<node><data>`billyvg/tigris.nvim` - a NodeJS remote plugin that provides async syntax highlighting for js</data></node>
		<node><data>`sindrets/diffview.nvim` - single tabpage interface for easily cycling through diffs for all modified files for any git rev</data></node>
		<node><data>`jackguo380/vim-lsp-cxx-highlight` - C/C++/Cuda/ObjC semantic highlighting using LSP</data></node>
		<node><data>`glepnir/lspsaga.nvim` - UI for LSP</data></node>
		<node><data>`amerlyq/nou.vim` - notes and outline united</data></node>
		<node><data>`jakewvincent/mkdnflow.nvim` - fluent navigation of documents and notebooks (AKA &quot;wikis&quot;) in markdown</data></node>
		<node><data>`oberblastmeister/neuron.nvim` - lua and the neuron binary allow one of the coolest note taking experiences</data></node>
		<node><data>`tpope/vim-sleuth` or `gpanders/editorconfig.nvim` for `editorconfig`</data></node>
		<node><data>`mizlan/iswap.nvim` - interactively select and swap: function arguments, list elements, function parameters, and more</data></node>
		<node><data>`ray-x/lsp_signature.nvim` - function signature when you type</data></node>
		<node><data>`rohit-px2/nvui` - gui app for neovim</data></node>
		<node><data>`anuvyklack/vim-cppman` - use `aitjcize/cppman` to lookup &quot;C++ 98/11/14/17/20 manual pages&quot;</data></node>
		<node><data>`AckslD/nvim-FeMaco.lua` - edit injected language trees with correct filetype in a floating window</data></node>
		<node><data>`ldelossa/litee.nvim` - library for building &quot;IDE-lite&quot; experiences</data></node>
		<node><data>`sindrets/diffview.nvim` - simple, unified, single tabpage diff interface</data></node>
		<node><data>`ray-x/navigator.lua` - code analysis and navigate tool</data></node>
		<node><data>`nvim-treesitter/nvim-treesitter-textobjects` - text-objects, select, move, swap, and peek support</data></node>
		<node><data>`svermeulen/vim-subversive` - two new operator motions to make it very easy to perform quick substitutions</data></node>
		<node><data>`wellle/targets.vim` - adds various text objects for more targets to operate on</data></node>
		<node><data>`ggandor/leap.nvim` - general-purpose motion plugin</data></node>
		<node><data>`ThePrimeagen/harpoon` - mark and create persisting key strokes to go to the files of interest</data></node>
		<node><data>`ivanesmantovich/xkbswitch.nvim` - edit on non-english, switch back to english when return to normal mode</data></node>
	</node>
</node>
<node><data>==== ENC ====</data>
	<node><data>[enc](https://github.com/life4/enc) instead of `encpipe`</data>
		<node><data>! quite the same but crossplatform and has binary releases</data></node>
		<node><data>~ or fork `encpipe`, port it to windows and make releases, hehe</data></node>
	</node>
	<node><data>`pass` for storing password</data>
		<node><data>use extensions that hides the filenames</data></node>
		<node><data>choose btw `gpg` and `age` backends</data></node>
		<node><data>enhance safety with other plugins</data></node>
		<node><data>decide how to remotely store and distribute the db</data></node>
		<node><data>think of using cli-tools based on `KeePassX` backend</data></node>
	</node>
	<node><data>how to store encrypted notes - use what? encryption plugin for vim? which?</data>
		<node><data>`nb` can encrypt ootb</data></node>
		<node><data>prefer anything wide-spreaded for all oses like gpg or openssl</data></node>
	</node>
</node>
</tree>
