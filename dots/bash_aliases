# vim: ft=bash

force_color_prompt=yes
# TODO: https://ohmyposh.dev/ :: prompt theme engine for any shell

# this is a single file which is included by default in the vanilla .bashrc
# so this is a single place where custom stuff may reside

PATH="$HOME/.local/bin:$PATH"
CDPATH="$HOME:$HOME/Documents:$HOME/Work:$HOME/.local:$CDPATH" # cd as subdirs of listed paths are in the cwd

alias aaa='bat ~/.bash_aliases'
alias aar='source ~/.bash_aliases'
alias bbr="source $HOME/.bashrc"
alias emscripten-tools-import-here='eval `emsdk_env.eval`'
alias wlvim='eval `emsdk_env.eval` ; lvim'

function mkdcd() {
    mkdir -p "$1" && cd "$1"
}
alias dfh='duf -only local 2>/dev/null || (df -h | grep Filesystem ; df -h | grep -E "/dev/(sd|nvm|hd)[a-z0-9]+")'
alias dufl='duf --only local'
alias pf="fzf --preview='bat -f {}' --bind shift-up:preview-page-up,shift-down:preview-page-down"
alias where="type -a"
# Enable aliases to be sudoâ€™ed
alias sudo='sudo '
alias _='sudo'

alias proc="ps -ef | grep -v grep | grep"
alias ytm="yt-dlp --extract-audio --audio-format mp3 --embed-thumbnail --add-metadata --audio-quality 0"
alias ytl="yt-dlp -f bestvideo+bestaudio --merge-output-format mkv"

alias aptu='sudo apt update'
alias aptU='sudo apt upgrade'
alias apti='sudo apt install'
alias aptr='sudo apt remove'
alias aptR='sudo apt autoremove ; sudo apt autoclean'
alias apts='apt search'
alias apth='apt show'

alias batd='bat -l dot'
alias batj='bat -l json'

alias cdf='cd $(ls -d */ | fzf)'
alias ..="cd .."
alias ..1="cd .."
alias 1..="cd .."
alias ..2="cd ../.."
alias 2..="cd ../.."
alias ..3="cd ../../.."
alias 3..="cd ../../.."
alias ..4="cd ../../../.."
alias 4..="cd ../../../.."
alias ..5="cd ../../../../.."
alias 5..="cd ../../../../.."
alias ..6="cd ../../../../../.."
alias 6..="cd ../../../../../.."
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias ~="cd ~"
alias -- -="cd -"

alias ls='ls --group-directories-first --color=auto --classify' # classify symbols
alias l='ls -1A'         # Lists in one column, hidden files.
alias ll='ls -lh'        # Lists human readable sizes.
alias lr='ll -R'         # Lists human readable sizes, recursively.
alias la='ll -A'         # Lists human readable sizes, hidden files.
alias lm='la | "$PAGER"' # Lists human readable sizes, hidden files through pager.
alias lx='ll -XB'        # Lists sorted by extension (GNU only).
alias lk='ll -Sr'        # Lists sorted by size, largest last.
alias lt='ll -tr'        # Lists sorted by date, most recent last.
alias lc='lt -c'         # Lists sorted by date, most recent last, shows change time.
alias lu='lt -u'         # Lists sorted by date, most recent last, shows access time.
alias sl='ls'            # I often screw this up.
alias dls='docker image ls | grep -v none'
alias dps='docker ps'
alias mntd='mount | grep -E "^/dev/"' # only real devices

alias lg='lazygit'

alias da='date "+%A, %B %d, %Y [%T]"'
alias path='echo -e ${PATH//:/\\n}'
alias openports='netstat --all --numeric --programs --inet'
alias psgr='ps -Af | grep $1'
# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

function grep-w-w() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo -e "  Too few args\n  Usage: 1=string-yes, 2=string-yes2\n  Find files containing both substrings"
    elif command -v rg &>/dev/null ; then
        rg -l "$1" * | xargs -r rg -l "$2"
    else
        grep -l "$1" * | xargs -r grep -l "$2"
    fi }

function grep-w-wo() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo -e "  Too few args\n  Usage: 1=string-yes, 2=string-no\n  Find files containing one substring and not another"
    elif command -v rg &>/dev/null ; then
        rg -l "$1" * | xargs -r rg --files-without-match "$2"
    else
        grep -l "$1" * | xargs -r grep -L "$2"
    fi }

cfff() # cd to dir of choice with help of 'fff' tool ('q' key)
{
    fff "$@"
    cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
}

# https://github.com/xwmx/nb/issues/102
nb-list() {
  nb list -t note --no-color | grep -P '\[\d*\]' |  sed -r 's/\[//' | sed -r 's/\]//' |
  fzf --height 50% \
    --preview "nb show -p {1} | head -n 200 | bat -l md" \
    --bind "alt-j:preview-down,alt-k:preview-up,alt-d:preview-page-down,alt-u:preview-page-up" \
    --preview-window=right:70% |
  cut -d$' ' -f1
}
bind '"\C-f\C-f": "$(nb-list)\e\C-e\e"' # dunno how it works - but looks ugly

# mind aint in use anymore
# function mind_find_pretty_state_files() {
#     declare dir=${1:-`pwd`} tmpState=`mktemp`
#     while read mindDir ; do
#         local fState="$mindDir/state.json"
#         if [ ! -f "$fState" ]; then continue ; fi
#         mv "$fState" $tmpState
#         cat "$tmpState" | jq -M -S . > "$fState"
#     done <<< $(find "$dir" -type d -name ".mind")
#     rm -f $tmpState ; }

# function git-root() {
#     local dir=${1:-`pwd`}
#     while [ "$dir" != "/" ]; do
#         if [ -d "$dir/.git" ]; then
#             echo $dir
#             break
#         else
#             dir=`readlink -m "$dir/.."`
#         fi
#     done }

# alias mind-pretty='mind_find_pretty_state_files $(git-root)'


eval "$(zoxide init bash)"

