#!/bin/bash

function conn_establish()
{
    local fpOpts="$1" sVpnPswd="$2" sOcCa="$3"

    [ ! -f "$fpOpts" ] && echo "Options enc-file '$fpOpts' not found" && exit 2
    eval "declare -A aaOpts=( $(encpipe -d -p "$sVpnPswd" -i "$fpOpts") )"
    # echo "${!aaOpts[@]} => ${aaOpts[@]}"
    # false
    return

    echo -e "$sPfxPswd\n$sVpnPswd\n" | \
        sudo -n openconnect --passwd-on-stdin $sOcCa \
             -c "$fpPfx" -u "$sPfxDomain\\$sPfxUser" "$sSrvrAddr"

    return
}

function opts_create()
{
    function prereq_check() { :; }
        local fpPfx="$1"
        [ ! -f "$fpPfx" ] && echo "PFX file is not available: '$fpPfx'" && exit 1
        if ! command -v encpipe > /dev/null ; then  echo "'encpipe' command not found" && exit 1 ; fi
        if ! command -v openconnect > /dev/null ; then  echo "'openconnect' command not found" && exit 1 ; fi

    function srvr_addr_ask() { :; }
        while true ; do
            echo -n "???? Server address: " ; read -r sSrvrAddr ; echo
            ping -q -c 1 "$sSrvrAddr" > /dev/null && break
        done

    function root_pswd_ask() { :; }
        while true; do
            echo -n "???? Local root password: " ; read -r -s sRootPswd ; echo
            sudo -k # force to ask for password
            echo "$sRootPswd" | sudo -p "  " -S true && echo && break
        done

    function pfx_pswd_ask() { :; }
        while true; do
            echo -n "???? PFX certifiate password ($fpPfx): " ; read -r -s sPfxPswd ; echo
            sPfxCertBody=$(sPfxPswd="$sPfxPswd" openssl pkcs12 -in "$fpPfx" -clcerts -nokeys -passin env:sPfxPswd)
            [ "$?" = "0" ] && break
        done

    function pfx_cert_vals() { :; }
        local sPfxLogin=$(echo $sPfxCertBody | head -n3 | tail -n1 | cut -d',' -f6 | cut -d'=' -f2 | tr -d ' ')
        local sPfxDomain=${sPfxLogin##*@}
        local sPfxUser=${sPfxLogin%%@*}
        [ -z "$sPfxUser" ] && echo "Username is not set in the certificate" && exit 1
        [ -z "$sPfxDomain" ] && echo "Domain is not set in the certificate" && exit 1

    function props_enc_write() { :; }
        local fpTmpOpts="$(mktemp -u).enc"

        while true; do
            echo -n "???? VPN password (will be used as settings file encryption password either): "
            read -r -s sVpnPswd ; echo
            echo "[certpasswd]=$sPfxPswd [rootpswd]=$sRootPswd [login]=$sPfxDomain\\$sPfxUser [server]=$sSrvrAddr" | \
                encpipe -e -p "$sVpnPswd" > "${fpTmpOpts}"

            echo "**** I will now try the settings via connection to your VPN ****"
            echo "       connection details: $sPfxDomain\\$sPfxUser @ $sSrvrAddr"

            if conn_establish "$fpTmpOpts" "$sVpnPswd" "--authenticate" ; then
                echo "Settings entered above accepted by server; finalizing them to '$fpPfx.enc'"
                mv "$fpTmpOpts" "$fpPfx.enc"
                break
            fi

            echo "~~~~ Server didn't accept your settings. Try re-enter VPN password"
        done

}

function opts_reenc()
{
    local fpOptsPfx="$1" fpOptsEnc="$1.enc"
    [ ! -f "$fpOptsEnc" ] && echo "Options enc-file '$fpOptsEnc' not found" && exit 2

    while true; do
        echo -n "Enter old VPN/enc password: " ; read -r -s sVpnPswdOld ; echo
        encpipe -d -p "$sVpnPswdOld" -i "$fpOptsEnc" >/dev/null && break
    done

    local sVpnPswdNew1=1 sVpnPswdNew2=2
    while [ -z "$sVpnPswdNew1" ] || [ -z "$sVpnPswdNew2" ] || [ "$sVpnPswdNew1" != "$sVpnPswdNew2" ] ; do
        echo -n "Enter new VPN/enc password: " ; read -r -s sVpnPswdNew1 ; echo
        echo -n "Confirm new VPN/enc password: " ; read -r -s sVpnPswdNew2 ; echo
        echo
    done

    encpipe -d -i "$fpOptsEnc" -p "$sVpnPswdOld" | encpipe -e -o "$fpOptsPfx.new.enc" -p "$sVpnPswdNew1"
    mv "$fpOptsEnc" "$fpOptsPfx.old.enc" ; mv "$fpOptsPfx.new.enc" "$fpOptsEnc"
}

opts_reenc "$@"

exit 0
