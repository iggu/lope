# vim: ft=bash

set shell bash
set shellopts '-eu'

set previewer pv

set icons on
set relativenumber on

set ifs "\n" # automatically split file names in $fs and $fx properly
set scrolloff 10 # leave some space at the top and the bottom of the screen

cmap <up> cmd-history-prev
cmap <down> cmd-history-next
# waiting for https://github.com/gokcehan/lf/issues/111
#cmap <c-right> cmd-word
#cmap <c-left> cmd-word-back

map <c-g> quit

map w :bash

# execute current file (must be executable)
map x $$f
map X !f

# toggle executable flag for a single file under cursor
map + %{{
    if [ -x "$f" ] ; then op="-" ; else op="+"; fi
    chmod a${op}x $f
    lf -remote "send $id reload"
}}

map P :Link
# `mkdir` and `touch` mappings
map ad push $mkdir<space>""<left>
map af push $touch<space>""<left>
map b rmi
map <delete> rmi
map T $taskell
map H $hnb
map ~ cd ~
map . set hidden!

map o &mimeopen $f
map O $mimeopen --ask $f
map i $command pv $f | less -XR
map I $less -XR $f
map L $command pistol $f | less -XR

map ; redraw # default '<c-l>' clashes with tmux and vim navigations
map | push !cat<space>$f<space>|<space> # pipe one command with another


map C $fzf-cd
map f $fzf-fd
map F $fzf-rg
map gl find
map gL find-back

map <c-r> reload
map <enter> shell

map r
map r<c-g> echo
map rr rename # cursor at the very end
map rR push rr<c-a> # cursor at the very beginning
map rb push rr<a-b> # cursor after extension dot
map rB push rr<a-b><a-b><a-f> # cursor before extension dot
map rc push rr<c-u> # new name

cmd rename_nx %[ -e $1 ] && printf "file exists" || mv $f $1
# Edit the current filename
map ra ${{
	# cursor at the end
	filename="${f##*/}"
	# quote it so we wont deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename_nx<space>$filename"
}}
# Edit filename before the extension
map re ${{
# cursor before last word (ext?)
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename_nx<space>$filename<a-b><c-b>"
}}

cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd $result"
}}

cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd $result"
}}

cmd open ${{
    test -L $f && f=$(readlink -f $f)
  case $(file --mime-type $f -b) in
    image/vnd.djvu|application/pdf|application/octet-stream) setsid -f zathura $fx >/dev/null 2>&1 ;;
    text/*) $EDITOR $fx;;
    image/x-xcf|image/svg+xml) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
    audio/*) mpv --audio-display=no $f ;;
    video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
    application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
    *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
  esac
}}


cmd rmi ${{
    set -f
    # if dialog --defaultno --yesno "Delete '$fx'?" 0 0; then rm -rf $fx; fi
    n=`echo "$fx" | wc -l`
    echo
    echo "Files to delete ($n):"
    while read F ; do
        echo "  - $F"
    done <<< "$fx"
    read -p "Proceed with DELETE? [y/n] " -n1 ans
    [ $ans = "y" ] && rm -rf $fx
    echo
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd bash ${{
    BashRC=`mktemp`
    echo -e "source $HOME/.bashrc \nPS1=\"\$PS1\[\033[00;31m\]|>LF<|\[\033[00m\] \" \n" > "$BashRC"
    bash --rcfile "$BashRC"
    rm "$BashRC"
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Add delete with sudo command
cmd Delete !{{
	echo $fs | xargs -d$'\n' sudo rm -r
}}

# Add paste with sudo command
cmd SudoPaste !{{
	lf -remote 'load' | while read file; do
		if [ ! -n "${mode+1}" ]; then
			mode="$file"
			continue
		fi
		files+=("$file")
	done
	if [[ "$mode" == copy ]]; then
		sudo cp -Rgi $files .
	elif [[ "$mode" == move ]]; then
		sudo mv -gi $files .
	fi
	# get 'basename' of the selection
	filename="${files[1]##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	# need to reload before selecting
	lf -remote "send $id reload"
	lf -remote "send $id select $filename"
}}

# paste and select the file pasted
cmd Paste %{{
	lf -remote 'load' | while read file; do
		if [ ! -n "${mode+1}" ]; then
			mode="$file"
			continue
		fi
		if [ -f "${file}" ]; then
			# get 'basename' of the selection
			filename="${file##*/}"
			# quote it so we won't deal with quotes in the lf -remote command
			filename="$(printf '%q' "$filename")"
			break
		fi
	done
	lf -remote "send $id paste"
	lf -remote "send $id select $filename"
}}

# Link files
cmd Link %{{
	lf -remote 'load' | while read file; do
		if [ ! -n "${mode+1}" ]; then
			mode="$file"
			continue
		fi
		files+=("$file")
	done
	if [ "${#files[@]}" -le 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 0
	fi
	# symbolicly copy mode is indicating a soft link
	if [[ "$mode" == copy ]]; then
		ln -sr $files -t .
	# while a move mode is indicating a hard link
	elif [[ "$mode" == move ]]; then
		ln $files -t .
	fi
	# get 'basename' of the selection
	filename="${files[1]##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	# need to reload before selecting
	lf -remote "send $id reload"
	lf -remote "send $id select $filename"
}}
